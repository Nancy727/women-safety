# -*- coding: utf-8 -*-
"""WomenSafetyMl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fYdAJeVhjovbr5QoXgQ6J8kammCafwDD
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
import joblib
from matplotlib.ticker import FuncFormatter

# ================== 1. DATA LOADING & SETUP ==================

plt.style.use('dark_background')


palette = {'Safe üü¢': '#2ecc71', 'Moderate üü°': '#f39c12', 'Dangerous üî¥': '#e74c3c'}

# Load data
data = pd.read_csv("content/CrimesOnWomenData.csv")
crime_columns = ['Rape', 'K&A', 'DD', 'AoW', 'AoM', 'DV', 'WT']
data['Total_Crimes'] = data[crime_columns].sum(axis=1)

# ================== 2. DYNAMIC SAFETY THRESHOLDS ==================
def calculate_thresholds(df):
    latest_year = df['Year'].max()
    latest_data = df[df['Year'] == latest_year]['Total_Crimes']
    return {
        'safe': latest_data.quantile(0.33),
        'danger': latest_data.quantile(0.66)
    }

thresholds = calculate_thresholds(data)

def classify_safety(total_crimes):
    if total_crimes < thresholds['safe']: return "Safe üü¢"
    elif total_crimes < thresholds['danger']: return "Moderate üü°"
    else: return "Dangerous üî¥"

# ================== 3. MODEL TRAINING WITH ACCURACY TRACKING ==================
preprocessor = ColumnTransformer([
    ('num', StandardScaler(), ['Year'] + crime_columns),
    ('cat', OneHotEncoder(handle_unknown='ignore'), ['State'])
])

X = data[['State', 'Year'] + crime_columns]
y = data['Total_Crimes']

try:
    model = joblib.load('crime_model.joblib')
    preprocessor = joblib.load('preprocessor.joblib')
    accuracy_metrics = joblib.load('accuracy_metrics.joblib')
    print("‚úì Model loaded successfully")
    print(f"üß† Last Model Accuracy: MAE={accuracy_metrics['MAE']}, R¬≤={accuracy_metrics['R¬≤']}")
except:
    print("‚öôÔ∏è Training new model...")
    X_processed = preprocessor.fit_transform(X)
    X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=0.2, random_state=42)

    model = RandomForestRegressor(n_estimators=200,
                                max_depth=15,
                                min_samples_leaf=2,
                                random_state=42)
    model.fit(X_train, y_train)


    y_pred = model.predict(X_test)
    accuracy_metrics = {
        'MAE': round(mean_absolute_error(y_test, y_pred), 2),
        'R¬≤': round(r2_score(y_test, y_pred), 3)
    }
    print(f"‚úÖ Model trained (MAE: {accuracy_metrics['MAE']}, R¬≤: {accuracy_metrics['R¬≤']})")


    joblib.dump(model, 'crime_model.joblib')
    joblib.dump(preprocessor, 'preprocessor.joblib')
    joblib.dump(accuracy_metrics, 'accuracy_metrics.joblib')

# ================== 4. ENHANCED VISUALIZATION DASHBOARD ==================
def create_dashboard(state, historical, prediction):
    fig = plt.figure(figsize=(18, 14))
    gs = fig.add_gridspec(3, 2)

    ax1 = fig.add_subplot(gs[0, :])
    sns.lineplot(data=historical, x='Year', y='Total_Crimes',
                marker='o', linewidth=2.5, ax=ax1, color='#3498db')


    ax1.axhline(thresholds['safe'], color=palette['Safe üü¢'], linestyle='--', alpha=0.7)
    ax1.axhline(thresholds['danger'], color=palette['Dangerous üî¥'], linestyle='--', alpha=0.7)
    ax1.fill_between(historical['Year'], thresholds['safe'], thresholds['danger'],
                    color=palette['Moderate üü°'], alpha=0.1)


    pred_year = historical['Year'].max() + 1
    ax1.plot(pred_year, prediction, 'X', markersize=12,
            color=palette[classify_safety(prediction)], markeredgewidth=2)

    ax1.set_title(f'{state} - Crime Trend Analysis (2018-{pred_year})', fontsize=16, pad=20)
    ax1.set_ylabel('Total Reported Crimes', fontsize=12)
    ax1.grid(True, alpha=0.3)


    ax2 = fig.add_subplot(gs[1, 0])
    latest = historical[historical['Year'] == historical['Year'].max()].iloc[0]
    crime_data = latest[crime_columns].sort_values()
    crime_data.plot.barh(ax=ax2, color='blue', alpha=0.7)
    ax2.set_title('Crime Type Distribution (Latest Year)', fontsize=14)
    ax2.set_xlabel('Number of Cases')
    ax2.grid(True, axis='x', alpha=0.3)

    ax3 = fig.add_subplot(gs[1, 1])
    safety = classify_safety(prediction)
    ax3.set_facecolor('#f8f9fa')
    ax3.text(0.5, 0.7, f"{prediction:.0f}",
            ha='center', va='center', fontsize=42,
            color=palette[safety])
    ax3.text(0.5, 0.4, f"Predicted Crimes for {pred_year}",
            ha='center', va='center', fontsize=14)
    ax3.text(0.5, 0.2, safety,
            ha='center', va='center', fontsize=18,
            bbox=dict(facecolor=palette[safety], alpha=0.3, pad=10))
    ax3.axis('off')

    ax4 = fig.add_subplot(gs[2, :])
    metrics = [
        ("Model Accuracy (R¬≤)", accuracy_metrics['R¬≤']),
        ("Average Error (MAE)", f"{accuracy_metrics['MAE']} crimes"),
        ("Safety Thresholds", f"Safe <{thresholds['safe']:.0f} | Dangerous >{thresholds['danger']:.0f}")
    ]

    for i, (label, value) in enumerate(metrics):
        ax4.text(0.1, 0.8-i*0.2, f"{label}:", fontsize=25, ha='left')
        ax4.text(0.6, 0.8-i*0.2, f"{value}", fontsize=25, ha='left', color='white')


    ax4.axis('off')
    plt.tight_layout()
    plt.show()

# ================== 5. PREDICTION ENGINE ==================
def predict_state_safety():
    print("\n" + "="*60)
    print(" WOMEN SAFETY ANALYTICS DASHBOARD ".center(60, '~'))
    print("="*60)

    state = input("\nEnter State Name: ").strip().title()

    if state not in data['State'].unique():
        print(f"\n‚ö†Ô∏è Available states:\n{', '.join(sorted(data['State'].unique()))}")
        return


    state_data = data[data['State'] == state].sort_values('Year').tail(5)
    latest_year = state_data['Year'].max()


    avg_crimes = state_data[crime_columns].mean()
    prediction_input = pd.DataFrame([{
        'State': state,
        'Year': latest_year + 1,
        **{col: avg_crimes[col] for col in crime_columns}
    }])


    processed_input = preprocessor.transform(prediction_input)
    predicted_crimes = model.predict(processed_input)[0]


    create_dashboard(state, state_data, predicted_crimes)
    print(f"\nüîç Safety Analysis for {state}:")
    print(f"- Last 5 years trend: {list(state_data['Total_Crimes'].values)}")
    print(f"- Prediction for {latest_year + 1}: {predicted_crimes:.0f} crimes ({classify_safety(predicted_crimes)})")
    print(f"- Model confidence: {accuracy_metrics['R¬≤']*100:.1f}% accuracy")

# ================== 6. MAIN EXECUTION ==================
if __name__ == "__main__":
    print("\nAvailable States:", ", ".join(sorted(data['State'].unique())))
    while True:
        predict_state_safety()
        if input("\nAnalyze another state? (y/n): ").lower() != 'y':
            print("\n" + "="*60)
            print(" IMPORTANT: Always report crimes to local authorities ".center(60, '~'))
            print("="*60)
            break